=BCheckbook=

'''Version:''' 0.1

'''Author:''' Bryce Campbell

'''Copyright:''' 2021

'''Description:''' A simple checkbook ledger that can be used on your computer and on the go without an Internet connection.

'''License:''' see LICENSE

==Notes==

This is a port of the <a href="https://github.com/bryceac/BCheckbook">original application</a> that was made for macOS and iOS for use on Linux systems and has been tested in Devuan Beowulf (aka. Debian 10) with GTK 3 and Swift 5.4.

While this does work on a Mac, I strongly recommend buying either 
the iOS version or the macOS version from the respective app stores, 
as the native Mac app currently support 
macOS Big Sur and later, while the code found here only works on 
macOS 12 and later.

Not only would the experience be a little better on macOS and iOS, 
but it can help me out financially and you <strong>should</strong> 
be able to get both the iOS and Mac app after only buying one version.

===Questions===

<ol>
<li>
<dl>
<dt style="font-weight:bold">Why create this port now? I thought you were going to wait for OrbTk, according to this <a href="https://github.com/bryceac/rcheckbook">repository</a>?</dt>
<dd>
<p>While this was the initial plan, as I wanted the application to work on both Windows and Linux, seeing as using Rust is a much better experience than Swift when you program on Windows.</p>
<p>However, due to missing widgets and no real good documentation, I started looking at GTK and found a <a href="https://github.com/rhx/SwiftGtk">library</a> from Rene Hexel that allowed me to take the Swift code I had and reuse it, with some minor modifications, and create a version using GTK in a manner that was a bit simpler than it would have been in Rust.</p>
<p>As a result, I decided to take on the challenge of making a Linux GUI application in Swift.</p>
</dd>
</dl>
</li>
<li>
<dl>
<dt style="font-weight:bold">Are you going to release this on Windows?</dt>
<dd>
<p>While I am not particularly fond of Windows, 
especially because temporary environment variables 
are a big pain in Windows, 
I would like release this on Windows, 
so that users have a more friendly application to use 
than a CLI-based application.</p>
<p>I have found out that Swift Support has improved for Windows 10,
such as a working version of Swift Package Manager, 
but I am not sure of the dependency used to communicate with the database.</p>
<p>If you have the time to do any work necessary to get 
this running on Windows, I will accept any help I can get, 
and would reduce the workload.</p>
</dd>
</dl>
</li>
<li>
<dl>
<dt style="font-weight:bold">Do you plan to sell this program, like you are selling a version for macOS and iOS?</dt>
<dd>
<p>With the current state the application is in, 
I may start looking into this, 
especially if this can compile on Windows, 
seeing as there may be some of my iOS users that 
use Windows on their computers.</p>
<p>However, I would much prefer a system of buy once install anywhere, 
which seems to be impossible these days outside Apple platforms.</p>
</dd>
</dl>
</li>
</ol>

===Plans===

I plan to keep this version the way it is right now,
as I just wanted a simple application 
that could be used to handle data from the original macOS and iOS apps.

===Known Issues===

<dl>
  <dt style="font-weight:bold">Tabbing does not submit entry</dt>
  <dd>
  <p>While testing the program, 
  I found data to not be filled when tabbing over, as the UI of 
  this application is more inline with my original design plan 
  for the macOS version.</p>
  <p>Being that I am new GTK 
  and not being able to find too many examples, 
  as well as not that much help, 
  I had to wing a few things based upon things 
  that could be inferred from the library's documentation.</p>
  <p>As a result, this issue may exist for a long time.</p>
  <p>If you notice this issue, 
  I suggest pressing enter on the field rather than tabbing.</p>
  </dd>
</dl>

===Contributing===

If you would like to help out with this project, 
to help make it more usable and user friendly, 
feel free to fork this repository and make a pull request.

Things that I could really use help with are any known issues, 
as well as adding in the following things:

<dl>
<dt style="font-weight:bold">Date Picker/Calendar drop down</dt>
<dd>
<p>Currently, the program can only modify the date via a string.</p>
<p>Obviously, 
allowing it to be changed in this manner has some problems, 
but Swift guard statements allow me to somewhat tackle this issue easily.</p>
<p>However, I would much prefer using a method that would guarantee results, 
like a dedicated drop down.</p>
</dd>
<dt style="font-weight:bold">Category autocompletion</dt>
<dd>
<p>While testing the program, 
I found out that it was possible to specify categories 
that should not exist and took measures to try to prevent that,
but I would like the user to be able to type in some text and 
have the renderer attempt to guess the category if the text is contained a category.</p>
</dd>
</dl>

The above are things that I may work on myself, 
but since this is my first foray in GTK 
and GUI programming for Linux, help would be much appreciated 
and would finally make this application into something 
that is not just better looking than the native macOS app with some kinks.
